0）概要
◆前提条件
****************************************************************************
単語：単語ファイル（keyword.txt）に存在するアルファベットの文字列とする。
入力：入力ファイル（wordinput.txt）に存在するアルファベットの文字列とする。
****************************************************************************
◆できること
頻度が1以上の単語を
・頻度順
・アルファベット順
に並び替えることができる

1）フォルダ説明
keyword.txt：正しい単語とみなす文字列を多数格納したファイル
wordinput.txt：入力した単語を多数格納したファイル
char_table.c：keyword.txtとwordinput.txtで一致するか否かの判定や頻度順やアルファベット順で並び替えるsort処理
char_table.h：構造体の宣言とchar_table.cで使用する関数のプロトタイプ宣言
in.c：keyword.txtとwordinput.txtの読み込み
in.h：in.cで使用する関数のプロトタイプ宣言
main.c：頻度表の全体の処理。
out.c：keyword.txtとwordinput.txt、頻度表の出力
out.h：out.cで使用する関数のプロトタイプ宣言

2）実行方法
  gccを使用して実行します。
　cファイルが格納されたフォルダまで移動してから、以下を実行します。

  2-1）makefileの使用
      ◇exeファイルの作成
      make
      ./test.exe
      
      以下はファイルの削除操作：手動でファイルを削除してもよい
      ************************************************
      ◇オブジェクトファイル削除
      make clean
      ◇オブジェクトファイルとオブジェクトファイルの削除
      make cleanall
      ************************************************
  2-2）複数ファイルのコンパイル
      gcc ./main.c ./char_table.c ./in.c ./out.c -o test
      ./test.exe